#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e
set -o pipefail

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(cd "$(dirname "$0")"; cd ..; pwd)"

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

topic "Installing Chrome for Testing"

INSTALL_DIR="$BUILD_DIR/.chrome-for-testing"
mkdir -p "$INSTALL_DIR"

# Detect if the old config var is still used
if [ -f "$ENV_DIR/CHROMEDRIVER_VERSION" ]; then
  error "This buildpack no longer supports CHROMEDRIVER_VERSION config var and must be removed to continue, because this buildpack now installs compatible versions of Chrome & Chromedriver. GOOGLE_CHROME_CHANNEL can be used to set Stable (default), Beta, Dev, or Canary."
fi

# Detect if Chrome is already installed
if which chrome; then
  error "Chrome is already installed. This buildpack now installs a compatible version of Chrome. Please, remove the other Chrome installation. Chrome may have been installed by another buildpack (such as heroku/heroku-buildpack-google-chrome buildpack), which should no longer be used with this buildpack."
fi

# Detect requested channel or default to stable
if [ -f "$ENV_DIR/GOOGLE_CHROME_CHANNEL" ]; then
  channel=$(cat "$ENV_DIR/GOOGLE_CHROME_CHANNEL")
  echo "Using env var GOOGLE_CHROME_CHANNEL=$channel" | indent
else
  channel=stable
fi
# The current version endpoint requires ALL CAPS.
CHANNEL="$(echo -n "$channel" | awk '{ print toupper($0) }')"
VERSION="$(curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 10 "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHANNEL")"
echo "Resolved $CHANNEL version $VERSION" | indent

# Step 1: Download and install Chrome
echo "Downloading Google Chrome" | indent
DEB_URL="https://dl.google.com/linux/direct/google-chrome-${CHANNEL}_current_amd64.deb"
DEB_LOCATION="$INSTALL_DIR/google-chrome.deb"
curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 10 -o "${DEB_LOCATION}" "${DEB_URL}" | indent

# Install the downloaded .deb package (requires sudo)
echo "Installing Google Chrome" | indent
dpkg -i "$DEB_LOCATION" || apt-get install -f -y # Fix dependencies if necessary
rm -f "$DEB_LOCATION"

# Step 2: Download and install Chromedriver
echo "Downloading Chromedriver" | indent
CHROMEDRIVER_URL="https://chromedriver.storage.googleapis.com/${VERSION}/chromedriver_linux64.zip"
CHROMEDRIVER_LOCATION="$INSTALL_DIR/chromedriver.zip"
curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 10 -o "${CHROMEDRIVER_LOCATION}" "${CHROMEDRIVER_URL}" | indent
unzip -q -o "$CHROMEDRIVER_LOCATION" -d "$INSTALL_DIR" | indent
rm -f "$CHROMEDRIVER_LOCATION"

source "$BUILDPACK_DIR/bin/install-chrome-dependencies"

# Step 3: Add executables to PATH
echo "Adding executables to PATH" | indent
mkdir -p "$BUILD_DIR/.profile.d"
echo "export PATH=\$HOME/.chrome-for-testing/chrome-linux64:\$HOME/.chrome-for-testing/chromedriver-linux64:\$PATH" >> "$BUILD_DIR/.profile.d/chrome-for-testing.sh"

# Verify the executables are actually present
export PATH="$BUILD_DIR/.chrome-for-testing/chrome-linux64:$BUILD_DIR/.chrome-for-testing/chromedriver-linux64:$PATH"
which chrome | indent
which chromedriver | indent

echo "Installed Google Chrome for Testing $CHANNEL version $VERSION" | indent
